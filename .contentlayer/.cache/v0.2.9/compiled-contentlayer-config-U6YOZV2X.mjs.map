{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts", "../../../content/definitions/Article.ts", "../../../content/definitions/Author.ts", "../../../content/definitions/Image.ts", "../../../content/definitions/Category.ts", "../../../content/definitions/Series.ts", "../../../content/definitions/Tag.ts", "../../../content/definitions/Snippet.ts"],
  "sourcesContent": ["import { makeSource } from \"contentlayer/source-files\";\r\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\r\nimport rehypePrettyCode from \"rehype-pretty-code\";\r\nimport rehypeSlug from \"rehype-slug\";\r\nimport remarkGfm from \"remark-gfm\";\r\nimport { Article } from \"./content/definitions/Article\";\r\nimport { Snippets } from \"./content/definitions/Snippet\";\r\n\r\nexport default makeSource({\r\n  contentDirPath: \"content\",\r\n  documentTypes: [Article, Snippets],\r\n  mdx: {\r\n    esbuildOptions(options) {\r\n      options.target = \"esnext\";\r\n      return options;\r\n    },\r\n    remarkPlugins: [[remarkGfm]],\r\n    rehypePlugins: [\r\n      [rehypeSlug],\r\n      [rehypePrettyCode],\r\n      [\r\n        rehypeAutolinkHeadings,\r\n        {\r\n          behavior: \"wrap\",\r\n          properties: {\r\n            className: [\"anchor\"],\r\n          },\r\n        },\r\n      ],\r\n    ],\r\n  },\r\n});\r\n", "import { defineDocumentType } from \"contentlayer/source-files\";\r\nimport readingTime from \"reading-time\";\r\nimport { Author } from \"./Author\";\r\nimport { Category } from \"./Category\";\r\nimport { Image } from \"./Image\";\r\nimport { Series } from \"./Series\";\r\nimport { Tag } from \"./Tag\";\r\n\r\nexport const Article = defineDocumentType(() => ({\r\n  name: \"Article\",\r\n  filePathPattern: \"articles/*.mdx\",\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: {\r\n      type: \"string\",\r\n      description: \"The title of the post\",\r\n      required: true,\r\n    },\r\n    publishedAt: {\r\n      type: \"string\",\r\n      description: \"The date the post was published\",\r\n    },\r\n    description: {\r\n      type: \"string\",\r\n      description: \"The description of the post\",\r\n      required: true,\r\n    },\r\n    seoDescription: {\r\n      type: \"string\",\r\n      description: \"The SEO description of the post\",\r\n      required: true,\r\n    },\r\n    status: {\r\n      type: \"enum\",\r\n      options: [\"draft\", \"published\"],\r\n      description: \"The status of the post\",\r\n      required: true,\r\n    },\r\n    series: {\r\n      type: \"nested\",\r\n      of: Series,\r\n      description: \"The series the post belongs to\",\r\n    },\r\n    tags: {\r\n      type: \"list\",\r\n      of: Tag,\r\n      description: \"The tags of the post\",\r\n    },\r\n    categories: {\r\n      type: \"list\",\r\n      of: Category,\r\n      description: \"The categories of the post\",\r\n      required: true,\r\n    },\r\n    author: {\r\n      type: \"nested\",\r\n      of: Author,\r\n      description: \"The author of the post\",\r\n      required: true,\r\n    },\r\n    covers: {\r\n      type: \"list\",\r\n      of: Image,\r\n      description: \"The covers of the post\",\r\n      required: true,\r\n    },\r\n  },\r\n  computedFields: {\r\n    readingTime: {\r\n      type: \"json\",\r\n      resolve: (doc) => readingTime(doc.body.raw),\r\n    },\r\n    wordCount: {\r\n      type: \"number\",\r\n      resolve: (doc) => doc.body.raw.split(/\\s+/gu).length,\r\n    },\r\n    slug: {\r\n      type: \"string\",\r\n      description: \"The slug of the post\",\r\n      resolve: (doc) => doc._raw.sourceFileName.replace(/\\.mdx$/, \"\"),\r\n    },\r\n  },\r\n}));\r\n", "import { defineNestedType } from \"contentlayer/source-files\";\r\n\r\nimport { Image } from \"./Image\";\r\n\r\nexport const Author = defineNestedType(() => ({\r\n  name: \"Author\",\r\n  fields: {\r\n    name: {\r\n      type: \"string\",\r\n      description: \"The name of the author\",\r\n      required: true,\r\n    },\r\n    designation: {\r\n      type: \"string\",\r\n      description: \"The designation of the author\",\r\n      required: true,\r\n    },\r\n    url: {\r\n      type: \"string\",\r\n      description: \"The URL of the author website\",\r\n    },\r\n    avatar: {\r\n      type: \"nested\",\r\n      of: Image,\r\n      description: \"The avatar of the author\",\r\n      default: {\r\n        src: \"/images/authors/default.png\",\r\n        alt: \"Author\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n", "import { defineNestedType } from \"contentlayer/source-files\";\r\n\r\nexport const Image = defineNestedType(() => ({\r\n  name: \"Image\",\r\n  fields: {\r\n    url: {\r\n      type: \"string\",\r\n      description: \"The URL of the image\",\r\n      required: true,\r\n    },\r\n    alt: {\r\n      type: \"string\",\r\n      description: \"The alt text of the image\",\r\n      required: true,\r\n    },\r\n  },\r\n}));\r\n", "import { defineNestedType } from \"contentlayer/source-files\";\r\n\r\nexport const Category = defineNestedType(() => ({\r\n  name: \"Category\",\r\n  fields: {\r\n    title: {\r\n      type: \"string\",\r\n      description: \"The title of the category\",\r\n      required: true,\r\n    },\r\n  },\r\n}));\r\n", "import { defineNestedType } from \"contentlayer/source-files\";\r\n\r\nexport const Series = defineNestedType(() => ({\r\n  name: \"Series\",\r\n  fields: {\r\n    title: {\r\n      type: \"string\",\r\n      description: \"The title of the series\",\r\n      required: true,\r\n    },\r\n    order: {\r\n      type: \"number\",\r\n      description: \"The order of the series\",\r\n      required: true,\r\n    },\r\n  },\r\n}));\r\n", "import { defineNestedType } from \"contentlayer/source-files\";\r\n\r\nexport const Tag = defineNestedType(() => ({\r\n  name: \"Tag\",\r\n  fields: {\r\n    title: {\r\n      type: \"string\",\r\n      description: \"The title of the tag\",\r\n      required: true,\r\n    },\r\n  },\r\n}));\r\n", "import { defineDocumentType } from \"contentlayer/source-files\";\r\nimport { Image } from \"./Image\";\r\n\r\nexport const Snippets = defineDocumentType(() => ({\r\n  name: \"Snippet\",\r\n  filePathPattern: \"snippets/*.mdx\",\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: {\r\n      type: \"string\",\r\n      description: \"The title of the snippet\",\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: \"string\",\r\n      description: \"The description of the snippet\",\r\n      required: true,\r\n    },\r\n    language: {\r\n        type: \"string\",\r\n        description: \"The language of the snippet\",\r\n        required: true,\r\n    },\r\n    logo: {\r\n      type: \"nested\",\r\n      of: Image,\r\n      description: \"The logo of the snippet\",\r\n      required: true,\r\n    },\r\n  },\r\n  computedFields: {\r\n    slug: {\r\n      type: \"string\",\r\n      description: \"The slug of the snippet\",\r\n      required: true,\r\n      resolve: (doc) => doc._raw.sourceFileName.replace(/\\.mdx$/, \"\"),\r\n    },\r\n  },\r\n}));\r\n"],
  "mappings": "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",
  "names": ["defineNestedType", "defineNestedType", "defineNestedType", "defineNestedType", "defineNestedType", "defineDocumentType", "defineDocumentType"]
}
